import { UploadConfig } from "./UploadConfig";
import { UploadParams } from "./UploadParams";
import { UploadedFile } from "./UploadedFile";
import { FileInputChangeEvent } from "./FileInputChangeEvent";
import { FileLike } from "./FileLike";
/**
 * You must only instantiate one instance of this class in your web app.
 *
 * This is particularly important when using the 'beginAuthSession' and 'endAuthSession' methods.
 */
export declare class Upload {
    private readonly config;
    private readonly accountId;
    private readonly accountIdLength;
    private readonly specialApiKeyAccountId;
    private readonly specialApiKeys;
    private readonly apiKeyPrefix;
    private readonly apiUrl;
    private readonly authenticateWithApiKey;
    private readonly cdnUrl;
    private readonly debugMode;
    private readonly headers;
    private readonly maxUploadConcurrency;
    private readonly refreshBeforeExpirySeconds;
    private readonly onProgressInterval;
    private readonly retryAuthAfterErrorSeconds;
    private readonly accessTokenPathBase;
    private readonly authMutex;
    private lastAuthSession;
    constructor(config: UploadConfig);
    /**
     * Call after a user has signed-in to your web app.
     *
     * Allows the user to perform authenticated uploads and/or downloads to the Upload CDN.
     *
     * You must await the promise before attempting to perform any uploads or downloads that require authentication.
     *
     * Method safety:
     * - IS idempotent: you may call this method multiple times, contiguously. (The previous auth session will be ended.)
     * - IS reentrant: can be called before another *AuthSession method has finished executing.
     *
     * @param authUrl The fully-qualified URL for your backend API's auth endpoint.
     * @param authHeaders Headers to send to your backend API.
     *                    IMPORTANT: do not call '*AuthSession' inside this callback, as this will cause a deadlock.
     */
    beginAuthSession(authUrl: string, authHeaders: () => Promise<Record<string, string>>): Promise<void>;
    /**
     * Call after the user signs-out of your web app.
     *
     * Method safety:
     * - IS idempotent: you may call this method multiple times, contiguously.
     * - IS reentrant: can be called before another *AuthSession method has finished executing
     */
    endAuthSession(): Promise<void>;
    createFileInputHandler(params: UploadParams & {
        onError?: (reason: any) => void;
        onUploaded: (result: UploadedFile) => void;
    }): (file: FileInputChangeEvent) => void;
    uploadFile(params: UploadParams & {
        file: FileLike;
    }): Promise<UploadedFile>;
    url(fileId: string, transformationSlug?: string): string;
    private withProgressReporting;
    private beginFileUpload;
    private debug;
    private error;
    private normalizeMimeType;
    /**
     * Call before every Upload API request. Since the connector is configured through global config, other code may have
     * changed these since we last set them. (I.e. consider two instances of this class, configured with different API
     * keys, and an upload is initiated on each of them at the same time...).
     */
    private preflight;
    /**
     * Call before every non-Upload API request.
     */
    private preflightExternalApi;
    private putUploadPart;
    private uploadPart;
    private accessTokenPath;
    private deleteAccessToken;
    private refreshAccessToken;
    private putJsonGetJson;
    private getText;
    private deleteNoResponse;
    private handleApiError;
    private nonUploadApiRequest;
}
