/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BeginUploadRequest } from "../models/BeginUploadRequest";
import type { BeginUploadResponse } from "../models/BeginUploadResponse";
import type { CompleteUploadPartRequest } from "../models/CompleteUploadPartRequest";
import type { FileId } from "../models/FileId";
import type { UploadPart } from "../models/UploadPart";
import type { UploadPartIndex } from "../models/UploadPartIndex";
import type { UploadPartList } from "../models/UploadPartList";
import { request as __request } from "../core/request";

export class FilesService {
  /**
   * Begins a new multipart file upload. Required API key type: 'secret_*' or 'public_*'.
   * @param requestBody File upload parameters.
   * @returns BeginUploadResponse Success.
   * @throws ApiError
   */
  public static async beginMultipartUpload(requestBody: BeginUploadRequest): Promise<BeginUploadResponse> {
    const result = await __request({
      method: "POST",
      path: `/v1/files`,
      body: requestBody,
      errors: {
        401: `Unauthenticated.`
      }
    });
    return result.body;
  }

  /**
   * Finalizes an upload part for an in-progress multipart upload. Required API key type: 'secret_*' or 'public_*'.
   * @param fileId
   * @param uploadPartIndex
   * @param requestBody
   * @returns void
   * @throws ApiError
   */
  public static async completeUploadPart(
    fileId: FileId,
    uploadPartIndex: UploadPartIndex,
    requestBody: CompleteUploadPartRequest
  ): Promise<void> {
    const result = await __request({
      method: "PUT",
      path: `/v1/files/${fileId}/upload_parts/${uploadPartIndex}`,
      body: requestBody,
      errors: {
        401: `Unauthenticated.`,
        403: `Unauthorized.`,
        404: `File or upload part not found.`
      }
    });
    return result.body;
  }

  /**
   * Gets a remaining upload part for an in-progress upload. Required API key type: 'secret_*' or 'public_*'.
   * @param fileId
   * @param uploadPartIndex
   * @returns UploadPart Success.
   * @throws ApiError
   */
  public static async getUploadPart(fileId: FileId, uploadPartIndex: UploadPartIndex): Promise<UploadPart> {
    const result = await __request({
      method: "GET",
      path: `/v1/files/${fileId}/upload_parts/${uploadPartIndex}`,
      errors: {
        401: `Unauthenticated.`,
        403: `Unauthorized.`,
        404: `File or upload part not found.`
      }
    });
    return result.body;
  }

  /**
   * Lists the remaining upload parts for an in-progress upload. An empty array is returned when the upload is complete. Required API key type: 'secret_*' or 'public_*'.
   * @param fileId
   * @returns UploadPartList Success.
   * @throws ApiError
   */
  public static async getUploadParts(fileId: FileId): Promise<UploadPartList> {
    const result = await __request({
      method: "GET",
      path: `/v1/files/${fileId}/upload_parts`,
      errors: {
        401: `Unauthenticated.`,
        403: `Unauthorized.`,
        404: `File not found.`
      }
    });
    return result.body;
  }
}
