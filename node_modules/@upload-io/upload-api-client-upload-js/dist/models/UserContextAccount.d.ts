import type { AccountId } from "./AccountId";
import type { AllowedOrigin } from "./AllowedOrigin";
import type { AnonymousAccessRules } from "./AnonymousAccessRules";
import type { ApiKeyDetails_PublicApiKey_ } from "./ApiKeyDetails_PublicApiKey_";
import type { ApiKeyDetails_SecretApiKey_ } from "./ApiKeyDetails_SecretApiKey_";
import type { PaddlePlanId } from "./PaddlePlanId";
import type { Plugin } from "./Plugin";
import type { PublicKey } from "./PublicKey";
import type { SubscriptionPlanEffective } from "./SubscriptionPlanEffective";
import type { TransformationCache } from "./TransformationCache";
import type { TransformationDefinition } from "./TransformationDefinition";
import type { Upstream } from "./Upstream";
import type { UserContextRules } from "./UserContextRules";
import type { UserRoleType } from "./UserRoleType";
/**
 * General information about a user's account.
 */
export declare type UserContextAccount = {
    accountId: AccountId;
    billing: {
        updatePaymentMethodUrl: string | null;
        planPrevious: SubscriptionPlanEffective | null;
        planNext: SubscriptionPlanEffective | null;
        planIsChanging: boolean;
        plan: SubscriptionPlanEffective | null;
        paymentDetailsSubmitted: boolean;
        paddlePlanId: PaddlePlanId | null;
        hadSubscription: boolean;
        cancelSubscriptionUrl: string | null;
    };
    caches: Record<string, TransformationCache>;
    plugins: {
        official: Array<Plugin>;
        custom: Array<Plugin>;
    };
    role: UserRoleType;
    rules: UserContextRules;
    security: AnonymousAccessRules & {
        publicKeys: Array<PublicKey>;
        apiKeys: {
            /**
             * API keys to use in backend code. Must be kept secret.
             */
            secret: Array<ApiKeyDetails_SecretApiKey_>;
            /**
             * API keys to use in frontend code.
             */
            public: Array<ApiKeyDetails_PublicApiKey_>;
        };
        allowedOriginsChecksEnabled: boolean;
        allowedOrigins: Array<AllowedOrigin>;
    };
    transformations: {
        definitions: Array<TransformationDefinition>;
    };
    upstreams: Array<Upstream>;
};
